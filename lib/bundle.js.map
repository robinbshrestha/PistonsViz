{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/bubbles.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D,+CAA+C;AAC/C,aAAa;;AAEb;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,aAAa;AACb,wCAAwC;AACxC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;;AAGb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,SAAS;AACT,oCAAoC;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C,WAAW;AACxD,6CAA6C,WAAW;AACxD,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,aAAa;AACb,wCAAwC;AACxC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;;AAGb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/bubbles.js\");\n","function createBubbleChart(error, datapoints) {\n    debugger\n    let width = 800,\n        height = 600;\n\n    let svg;\n    let defs;\n    let forces;\n    let forceSimulation;\n    let radiusScale = d3.scaleSqrt().domain([0, 300]).range([0, 150]);\n    \n\n    createSVG();\n    createDEF();\n    createCircles();\n    ready();\n    createForces();\n    addGroupingListeners();\n    createForceSimulation();\n    // ticked();\n    // circles();\n    // addFillListener();\n\n\n\n    function createSVG() {\n        debugger\n        svg = d3.select(\"#chart\")\n            .append(\"svg\")\n            .attr(\"height\", height)\n            .attr(\"width\", width)\n    }\n\n    function createDEF() {\n        debugger\n        defs = svg.append(\"defs\");\n        defs.append(\"pattern\")\n            .attr(\"height\", \"100%\")\n            .attr(\"width\", \"100%\")\n            .attr(\"patternContentUnits\", \"objectBoundingBox\")\n            .append(\"image\")\n            .attr(\"height\", 1)\n            .attr(\"width\", 1)\n            .attr(\"preserveAspectRatio\", \"none\")\n    }\n\n    function ready() {\n        debugger\n        defs.selectAll(\"player-pattern\")\n            .data(datapoints)\n            .enter().append(\"pattern\")\n            .attr(\"class\", \"player-pattern\")\n            .attr(\"id\", function (d) {\n                return d.name.toLowerCase().replace(\" \", \"-\")\n            })\n            .attr(\"height\", \"100%\")\n            .attr(\"width\", \"100%\")\n            .attr(\"patternContentUnits\", \"objectBoundingBox\")\n            .append(\"image\")\n            .attr(\"height\", 1)\n            .attr(\"width\", 1)\n            .attr(\"opacity\", 0.75)\n            .attr(\"preserveAspectRatio\", \"none\")\n            .attr(\"xlink:href\", function (d) {\n                return d.image_path\n            })\n    }\n\n\n    function createCircles() {\n        debugger\n        // let radiusScale = d3.scaleSqrt().domain([0, 300]).range([0, 150])\n\n        let simulation = d3.forceSimulation() //takes the circles and applies forces to them to go in a certain place\n            .force(\"x\", d3.forceX(width / 2).strength(0.05)) //pushes them left to right\n            .force(\"y\", d3.forceY(height / 2).strength(0.05)) //pushes them down\n            .force(\"collide\", d3.forceCollide(function (d) { //does not allow the bubbles to collide based on the radius you give it\n                return radiusScale(d.ptsg) + 1; //+1 will add spacing between the bubbles so that as the circle gets bigger the collision force gets bigger\n            }))\n\n        let circles = svg.selectAll(\".player\") //node and circles are synonymous\n            .data(datapoints) //for everysingle datapoint\n            .enter().append(\"circle\") //we draw a circle\n            .attr(\"class\", \"player\")\n            .attr(\"r\", function (d) { //radius of the value\n                return radiusScale(d.ptsg);\n            })\n            .attr(\"fill\", function (d) { //fill it with the url with their name and replace a space with a dash\n                return \"url(#\" + d.name.toLowerCase().replace(\" \", \"-\") + \")\";\n            })\n            .on('click', function (d) {\n                let xPos = d3.mouse(this)[0] - 15;\n                let yPos = d3.mouse(this)[1] - 55;\n                tooltip.attr(\"transform\", \"translate(\" + xPos + \",\" + yPos + \")\")\n                tooltip.select(\"text\").text(d.name + \" \" + d.trb + \" reb/game\")\n\n            })\n\n            .on('dblclick', function (d) {\n                let xPos = d3.mouse(this)[0] - 15;\n                let yPos = d3.mouse(this)[1] - 55;\n                tooltip.attr(\"transform\", \"translate(\" + xPos + \",\" + yPos + \")\")\n                tooltip.select(\"text\").text(d.name + \" \" + d.ast + \" ast/game\")\n\n            })\n\n            .on(\"mouseover\", function () {\n                tooltip.style(\"display\", null);\n            })\n\n            .on(\"mouseout\", function () {\n                tooltip.style(\"display\", \"none\");\n            })\n\n            .on(\"mousemove\", function (d) {\n                let xPos = d3.mouse(this)[0] - 15;\n                let yPos = d3.mouse(this)[1] - 55;\n                tooltip.attr(\"transform\", \"translate(\" + xPos + \",\" + yPos + \")\")\n                tooltip.select(\"text\").text(d.name + \" \" + d.ptsg + \" pts/game\")\n            })\n\n\n        let tooltip = svg.append(\"g\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"display\", \"none\")\n\n\n        tooltip.append(\"text\")\n            .attr(\"x\", 15)\n            .attr(\"dy\", \"1.2em\")\n            .style(\"font-size\", \"24px\")\n            .style('fill', 'white')\n            .attr(\"font-weight\", \"bold\")\n\n        //from the simulation variable above\n\n        simulation.nodes(datapoints) // simulation is like a clock, for every sec, it updates the position of the circles for every node\n            .on('tick', ticked)\n\n        function ticked() { //everytime this function is called it will grab the circles and set their cx and cy\n            circles\n                .attr(\"cx\", function (d) {\n                    return d.x\n                })\n                .attr(\"cy\", function (d) {\n                    return d.y\n                })\n\n        }\n    }\n\n    // function addFillListener() {\n    //     d3.selectAll('input[name=\"fill\"]')\n    //         .on(\"change\", function () {\n    //             updateCircles();\n    //         });\n    // }\n\n    // function updateCircles() {\n    //     circles\n    //     .attr(\"fill\", function(d) {\n\n    //     })\n    // }\n \n    function addGroupingListeners() {\n        debugger\n        addListener(\"#gsw\", forces.gsw)\n        addListener(\"#det\", forces.det)\n\n        function addListener(selector, forces) {\n            d3.select(selector).on(\"click\", function () {\n                updateForces(forces)\n            });\n        }\n\n        function updateForces(forces) {\n            debugger\n            // let radiusScale = d3.scaleSqrt().domain([0, 300]).range([0, 150])\n\n            forceSimulation\n                .force(\"x\", forces.x)\n                .force(\"y\", forces.y)\n                .force(\"collide\", d3.forceCollide(function (d) {\n                    return radiusScale(d.ptsg)\n                }))\n                .alphaTarget(0.2)\n                .restart()\n\n        }\n\n    }\n\n    function ticked() { //everytime this function is called it will grab the circles and set their cx and cy\n        circles\n            .attr(\"cx\", function (d) {\n                return d.x\n            })\n            .attr(\"cy\", function (d) {\n                return d.y\n            })\n    }\n\n    function circles() {\n         svg.selectAll(\".player\") //node and circles are synonymous\n        .data(datapoints) //for everysingle datapoint\n        .enter().append(\"circle\") //we draw a circle\n        .attr(\"class\", \"player\")\n        .attr(\"r\", function (d) { //radius of the value\n            return radiusScale(d.ptsg);\n        })\n        .attr(\"fill\", function (d) { //fill it with the url with their name and replace a space with a dash\n            return \"url(#\" + d.name.toLowerCase().replace(\" \", \"-\") + \")\";\n        })\n    }\n    function createForces() {\n        debugger\n        var forceStrength = 0.05;\n\n        forces = {\n            gsw: createCombineForces(),\n            det: createCountryCenterForces()\n        };\n\n    function createCountryCenterForces() {\n        debugger\n        return {\n            x: d3.forceX(combineForceX).strength(forceStrength),\n            y: d3.forceY(combineForceY).strength(forceStrength)\n        }\n\n        function combineForceX(d) {\n            debugger\n            if (d.team === \"det\") {\n                return (width * .9)\n            } else if (d.team) {\n                return (width / 2)\n            }\n        }\n\n        function combineForceY(d) {\n            debugger\n            if (d.team === \"det\") {\n                return (height * .9)\n            } else if (d.team) {\n                return (height / 2)\n            }\n        }\n    }\n\n        function createCombineForces() {\n            debugger\n            return {\n                x: d3.forceX(combineForceX).strength(forceStrength),\n                y: d3.forceY(combineForceY).strength(forceStrength)\n            }\n        \n            function combineForceX(d) {\n                debugger\n                if (d.team === \"gsw\") {\n                    return (width / 8)\n                } else if (d.team) {\n                    return (width / 2)\n                }\n            }\n\n            function combineForceY(d) {\n                debugger\n                if (d.team === \"gsw\") {\n                    return (height / 8)\n                } else if (d.team) {\n                    return (height / 2)\n                }\n            }\n        }\n    }\n\n    function createForceSimulation() {\n        debugger\n        // let radiusScale = d3.scaleSqrt().domain([0, 300]).range([0, 150])\n\n        forceSimulation = d3.forceSimulation()\n        .force(\"x\", forces.gsw.x)\n        .force(\"y\", forces.gsw.y)\n        .force(\"collide\", d3.forceCollide(function(d) {\n            return radiusScale(d.ptsg)\n        }))\n        forceSimulation.nodes(datapoints)\n            .on(\"tick\", function() {\n                circles\n                    .attr(\"cx\", function(d) {return d.x})\n                    .attr(\"cy\", function(d) {return d.y})\n            });\n\n        //\n        let circles = svg.selectAll(\".player\") //node and circles are synonymous\n            .data(datapoints) //for everysingle datapoint\n            .enter().append(\"circle\") //we draw a circle\n            .attr(\"class\", \"player\")\n            .attr(\"r\", function (d) { //radius of the value\n                return radiusScale(d.ptsg)\n            })\n            .attr(\"fill\", function (d) { //fill it with the url with their name and replace a space with a dash\n                return \"url(#\" + d.name.toLowerCase().replace(\" \", \"-\") + \")\";\n            })\n            .on('click', function (d) {\n                let xPos = d3.mouse(this)[0] - 15;\n                let yPos = d3.mouse(this)[1] - 55;\n                tooltip.attr(\"transform\", \"translate(\" + xPos + \",\" + yPos + \")\")\n                tooltip.select(\"text\").text(d.name + \" \" + d.trb + \" reb/game\")\n\n            })\n\n            .on('dblclick', function (d) {\n                let xPos = d3.mouse(this)[0] - 15;\n                let yPos = d3.mouse(this)[1] - 55;\n                tooltip.attr(\"transform\", \"translate(\" + xPos + \",\" + yPos + \")\")\n                tooltip.select(\"text\").text(d.name + \" \" + d.ast + \" ast/game\")\n\n            })\n\n            .on(\"mouseover\", function () {\n                tooltip.style(\"display\", null);\n            })\n\n            .on(\"mouseout\", function () {\n                tooltip.style(\"display\", \"none\");\n            })\n\n            .on(\"mousemove\", function (d) {\n                let xPos = d3.mouse(this)[0] - 15;\n                let yPos = d3.mouse(this)[1] - 55;\n                tooltip.attr(\"transform\", \"translate(\" + xPos + \",\" + yPos + \")\")\n                tooltip.select(\"text\").text(d.name + \" \" + d.ptsg + \" pts/game\")\n            })\n\n\n        let tooltip = svg.append(\"g\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"display\", \"none\")\n\n\n        tooltip.append(\"text\")\n            .attr(\"x\", 15)\n            .attr(\"dy\", \"1.2em\")\n            .style(\"font-size\", \"24px\")\n            .style('fill', 'white')\n            .attr(\"font-weight\", \"bold\")\n            \n    }\n\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    debugger\n    d3.queue() //pulling in data\n        .defer(d3.csv, \"pistons_data.csv\")\n        .await(createBubbleChart)\n});"],"sourceRoot":""}